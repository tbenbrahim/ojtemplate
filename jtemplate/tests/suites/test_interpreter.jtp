var testSuite={
    description: 'Interpreter',
    tests: 
    [
        {
            description: 'Post increment test',
            test: function(){
                 var a=1;
                 var b=a++;
                 return b==1 && a==2;
            }
        },{
            description: 'Post decrement test',
            test: function(){
                 var a=1;
                 var b=a--;
                 return b==1 && a==0;
            }
        },{
            description: 'Pre increment test',
            test: function(){
                 var a=1;
                 var b=++a;
                 return b==2 && a==2;
            }
        },{
            description: 'Pre decrement test',
            test: function(){
                 var a=3;
                 var b=--a;
                 return b==2 && a==2;
            }
        },{
            description: 'op= tests',
            test: function(){
                 var a=var b=var c=var d=var e=10;
                 return (a+=1)==11 && (b-=1)==9 && (c*=2)==20 && (d/=5)==2 && (e%=3)==1 &&
                        a==11 && b==9 && c==20 && d==2 && e==1;
            }
        },{
            description: 'ternary ?: tests',
            test: function(){
                 var a=10;
                 return (a==10?true:false) && a!=10?false:true;
            }
        },{
            description: 'ternary expression with non boolean throws exception',
            test: function(){
            	try{
                 	var a=10;
                 	let b=('a'.length()?true:false) && a!=10?false:true;
                 	return false;
                }catch(e){
                	return true;
                }
            }
        },{
            description: 'for loop test',
            test: function(){
                var a=0;
                for (var i=0;i<100;++i){
                    ++a;
                }
                return a==100;
            }
        },{
            description: 'for loop test with continue',
            test: function(){
                var a=0;
                for (var i=0;i<100;++i){
                    if (i%2==0) continue;
                    ++a;
                }
                return a==50;
            }
        },{
            description: 'for loop test with break',
            test: function(){
                var a=0;
                for (var i=0;i<20;++i){
                    if (i>=10) break;
                    ++a;
                }
                return a==10;
            }
        },{
            description: 'while loop test',
            test: function(){
                var a=var i=0;
                while (i<100){
                    ++a;
                    ++i;
                }
                return a==100;
            }
        },{
            description: 'if test',
            test: function(){
            	if ('a'.length()==1)
            		return true;
            	return false;
            }
        },{
            description: 'else test',
            test: function(){
            	if ('a'.length()==2)
            		return false;
            	else
            		return true;
            }
        },{
            description: 'if with non boolean throws exception',
            test: function(){
            	try{
            		if ('a'.length())
            			return true;
            		return false;
            	}catch(e){
            		return true;
            	}
            }
        },{
            description: 'while loop test with continue',
            test: function(){
        		var a=var i=0;
                while (i<100){
                	++i;
                    if (i%2==0) continue;
                    ++a;
                }
                return a==50;
            }
        },{
            description: 'while loop test with break',
            test: function(){
                var a=var i=0;
                while (i<100){
                	++i;
                    ++a;
                    if (i>=10) break;
                }
                return a==10;
            }
        },{
            description: 'try finally with return in try block',
            test: function(){
        		var a=0;
                var f=function(){
                	try{
                		return 1;
                	}finally{
                		a=2;
                	}
                };
                return f()==1 && a==2;
            }
        },{
            description: 'try finally with return in finally block',
            test: function(){
        		var a=0;
                var f=function(){
                	try{
                		a=2;
                		return a;
                	}finally{
                		return 3;
                	}
                };
                return f()==3 && a==2;            }
        },{
            description: 'try catch with user exception',
            test: function(){
        		try{
        			throw 'test';
        			return false;
        		}catch(e){
        			return e=='test';
        		}
        	}
        },{
        	description: 'try catch with system exception',
        	test: function(){
        		try{
        			var a=[1,2];
        			var b=a[10];
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{ //regression bug 124
        	description: 'try catch passes return through',
        	test: function(){
        		return function(){
        			try{
        				return true;
	        		}catch(e){
	        			return false;
        			}
        		}();
        	}
        },{ 
        	description: 'try catch passes break through',
        	test: function(){
        		for (var i=0;i<10;i++){
        			try{
        				break;
        			}catch(e){
        				return false;
        			}
        		}
        		return true;
        	}
        },{ 
        	description: 'try catch passes continue through',
        	test: function(){
        		for (var i=0;i<10;i++){
        			try{
        				continue;
        			}catch(e){
        				return false;
        			}
        		}
        		return true;
        	}
        },{
        	description: 'try finally catch, all steps reached',
        	test: function(){
        		var a=var b=var c=var d=0;
        		try{
        			a=1;
        			try{
        				b=1;
        				var x=a[10];
        			}finally{
        				c=1;
        			}
        		}catch(e){
        			d=1;
        		}
        		return a==1 && b==1 && c==1 && d==1;
        	}
        },{
        	description: 'try finally catch, catch after finally',
        	test: function(){
        		var a=0;
        		try{
        			try{
        				var x=a[10];
        			}finally{
        				a=10;
        			}
        		}catch(e){
        			a=1;
        		}
        		return a==1;
        	}
        },{
        	description: 'compare array for equality',
        	test: function(){
        		var a=[1,2,3,'4','5'];
        		var b=[1,2,3,'4','5'];
        		return a==b;
        	}
        },{
        	description: 'prototype construction/usage',
        	test: function(){
        		var Foo={prototype:{getBar: function(){return 'bar';}}};
        		var x={prototype:Foo};
        		return x.getBar()=='bar';
            }
        },{
        	description: 'function chaining',
        	test: function(){
    			var a='1.343.34.2'; 
    			return a.replaceAll('.','').replaceAll('34','x')=='1x3x2';
        	}
        },{
        	description: 'static scoping',
        	test: function(){
        		let x = 0;
        		let f=function() { return x; };
        		let g=function () { let x = 1; return f(); };
        		return g()==0;
        	}
        },{
        	description: 'compare integers',
        	test: function(){
        		return 10==10 && 10!=6 && 10>6 && 10<12 && 10>=6 && 10<=12 &&
        			10>=10 && 10<=10; 
        	}
        },{
        	description: 'compare floats',
        	test: function(){
        		return 10.==10. && 10.!=6. && 10.>6. && 10.<12. && 10.>=6. && 10.<=12. &&
        			10.>=10. && 10.<=10.; 
        	}
        },{
        	description: 'compare strings',
        	test: function(){
        		return 'a'=='a' && 'a'!='b' && 'a'<'b' && 'a'<='b' && 'a'<='a'
        			&& 'b'>'a' && 'bb'>='ba' && 'bb'>='bb';
        	}
        },{
        	description: 'compare booleans',
        	test: function(){
        		return true==true && false==false && true!=false;
        	}
        },{
        	description: 'compare Void',
        	test: function(){
        		let a=Void;
        		let b=Void;
        		let c=NaN;
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare NaN',
        	test: function(){
        		let a=NaN;
        		let b=NaN;
        		let c=Void;
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare functions',
        	test: function(){
        		let a=function(a,b){return a+b;};
        		let b=[1,a];
        		let c=function(a,b){return a-b;};
        		return a==b[1] && b[1]!=c && a!=c && !(a!=b[1]);
        	}
        },{
        	description: 'compare library functions',
        	test: function(){
        		let a=String.prototype.length;
        		let b=[1,a];
        		let c=String.prototype.substr;
        		return a==b[1] && b[1]!=c && a!=c && !(a!=b[1]);
        	}
        },{
        	description: 'compare maps',
        	test: function(){
        		let a={a:1,b:'2',c:3};
        		let b={a:1,b:'2',c:3};
        		let c={a:1,b:'2',c:4};
        		let d={a:1,b:'2',x:3};
        		return a==b && b!=c && a!=c && !(a!=b) && !(a==d);
        	}
        },{
        	description: 'compare arrays',
        	test: function(){
        		let a=[1,'a',[1,2,['a','b',{a:true,b:34.5}]]];
        		let b=[1,'a',[1,2,['a','b',{a:true,b:34.5}]]];
        		let c=[1,'a',[1,2,['a','b',{a:true,b:34.6}]]];
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare integer and float',
        	test: function(){
        		return 10==10. && 10!=6. && 10>6. && 10<12. && 10>=6. && 10<=12. &&	10>=10. && 10<=10.
        	        && 10.==10 && 10.!=6 && 10.>6 && 10.<12 && 10.>=6 && 10.<=12 && 10.>=10 && 10.<=10;
        	}
        },{
        	description: 'compare integer and string',
        	test: function(){
        		return '10'==10 && '10'!=6 && '20'>10 && '10'<12 && '20'>=11 && '10'<=12 && '10'>=10 && '10'<=10        	
        		&& 10=='10' && 10!='6' && 20>'16' && 10<'12' && 20>='16' && 10<='12' && 10>='10' && 10<='10';
        	}
        },{
        	description: 'compare float and string',
        	test: function(){
        		return '10.'==10. && '10.'!=6. && '20.'>10. && '10.'<12. && '20.'>=11. && '10.'<=12. && '10.'>=10. && '10.'<=10.        	
        		&& 10.=='10.' && 10.!='6.' && 20.>'16.' && 10.<'12.' && 20.>='16.' && 10.<='12.' && 10.>='10.' && 10.<='10.';
        	}
        },{
        	description: 'mismatched type compare',
        	test: function(){
        		return !(true==1) && !(true==1.) && true!=1. && !(true=='1') && true!='1'
        			&& 1!=true && 1.!=true && '1'!=true && Void!=NaN && NaN!=Void
        			&& String.prototype.length!=true && function(){return 1;}!=true
        			&& {a:1}!=true && [1,2]!=true;
        	}
        },{
        	description: 'switch()',
        	test: function(){
        		let a=10;
        		switch(a){
        		case 1: throw 'error';
        		case 10: a=2;break;
        		default: throw 'error';
        		}
        		return a==2;
        	}
        },{
        	description: 'switch() without match',
        	test: function(){
        		let a=11;
        		switch(a){
        		case 1: throw 'error';
        		case 10: a=2;break;
        		case 12: throw 'error';
        		}
        		return a==11;
        	}
        },{
        	description: 'switch() default case',
        	test: function(){
        		let a=11;
        		switch(a){
        		case 1: 
        		case 10: throw 'error';
        		default: a=2;
        		}
        		return a==2;
        	}
        },{
        	description: 'switch() fallthrough',
        	test: function(){
        		let a=10;
        		switch(a){
        		case 1: 
        		case 10: a=3;
        		default: a=2;
        		}
        		return a==2;
        	}
        },{
        	description: 'switch() too many default throws exception',
        	test: function(){
        		let a=10;
        		try{
	        		switch(a){
	        		case 1: 
	        		case 10: a=3;
	        		default: a=2;
	        		default: a=2;
	        		}
	        		return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'switch() default not last throws exception',
        	test: function(){
        		let a=10;
        		try{
	        		switch(a){
	        		case 1: 
	        		case 10: a=3;
	        		default: a=2;
	        		case 20: a=2;
	        		}
	        		return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'foreach on array',
        	test: function(){
        		let sum=0;
        		let arr=[1,2,3];
        		foreach (n in arr)
        			sum+=n;
        		return sum==6;
        	}
        },{
        	description: 'foreach on map',
        	test: function(){
        		let sum='';
        		let map={a:1,b:2,c:3};
        		foreach (n in map){
        			sum+=n;
        		}
        		return sum=='abc' || sum=='acb' || sum=='bac' || sum=='bca' || sum=='cab' || sum=='cba';
        	}
        },{
        	description: 'foreach with break',
        	test: function(){
        		let sum=0;
        		let arr=[1,2,3];
        		foreach (n in arr){
        			if(n==3)
        				break;
        			sum+=n;
        		}
        		return sum==3;
        	}
        },{
        	description: 'foreach with continue',
        	test: function(){
        		let sum=0;
        		let arr=[1,2,3];
        		foreach (n in arr){
        			sum+=n;
        			continue;
        			sum+=10;
        		}
        		return sum==6;
        	}
        },{
        	description: 'unbound vars/partial application',
        	test: function(){
        		let add=function(x,y){return x+y;};
        		let add1=add(@v,1);
        		let add2=add(2,@v);
        		return add1(10)==11 && add2(23)==25;
        	}
        },{
        	description: 'unbound vars/partial application with varargs',
        	test: function(){
	    		let foo=function(x,a...){
	    			return typeof(a)=='array' && x==1
	    			&& a[0]==2 && a[1]==3 && a[2]==4;
	    		};
	    		let bar=foo(1,2,@x...);
	    		return bar(3,4);
        	}
        },{
        	description: 'vararg function',
        	test: function(){
        		let foo=function(x,a...){
        			return typeof(a)=='array' && x==1
        			&& a[0]==2 && a[1]==3 && a[2]==4;
        		};
        		return foo(1,2,3,4);
        	}
        },{
        	description: 'closures',
        	test: function(){
        		let f={};
        		for (var i=0;i<10;++i){
        			let f[i]=function(n){
        				return function(){
        					return n; 
        				};
        			}(i);
        		}
        		for (var i=0;i<10;++i){
        			if (f[i]()!=i)
        				return false;
        		}
        		return true;
        	}
        },{
        	description: 'templates',
        	test: function(){
	        	template htmlTable{ 
			  				#<table>
	  						#<tr>
					header 	#<th>columnLabel</th>
	  						#</tr>
					row  	#<tr>
					cell  	#<td>cellData</td>
					row   	#</tr>
	  						#</table>
				} 
				instructions for htmlTable(dataMap){ 
					header foreach(label in dataMap.labels): columnLabel=label; 
					row foreach(dataArray in dataMap.data): ; 
					cell foreach(element in dataArray): cellData=element; 
				} 
				let people={labels: ['Name','Age'], data: [['John',42], ['Mary',38]] }; 
				let res=htmlTable(people);
				let ref='<table>\r\n<tr>\r\n<th>Name</th>\r\n<th>Age</th>\r\n</tr>\r\n<tr>\r\n<td>John</td>\r\n'
	        	 + '<td>42</td>\r\n</tr>\r\n<tr>\r\n<td>Mary</td>\r\n<td>38</td>\r\n</tr>\r\n</table>\r\n';
	        	return ref==res; 	
        	}
        }
    ]
};    

