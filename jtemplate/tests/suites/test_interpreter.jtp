var testSuite={
    description: 'Interpreter',
    tests: 
    [
        {
            description: 'Post increment test',
            test: function(){
                 var a=1;
                 var b=a++;
                 return b==1 && a==2;
            }
        },{
            description: 'Post decrement test',
            test: function(){
                 var a=1;
                 var b=a--;
                 return b==1 && a==0;
            }
        },{
            description: 'Pre increment test',
            test: function(){
                 var a=1;
                 var b=++a;
                 return b==2 && a==2;
            }
        },{
            description: 'Pre decrement test',
            test: function(){
                 var a=3;
                 var b=--a;
                 return b==2 && a==2;
            }
        },{
            description: 'op= tests',
            test: function(){
                 var a=var b=var c=var d=var e=10;
                 return (a+=1)==11 && (b-=1)==9 && (c*=2)==20 && (d/=5)==2 && (e%=3)==1 &&
                        a==11 && b==9 && c==20 && d==2 && e==1;
            }
        },{
            description: 'ternary ?: tests',
            test: function(){
                 var a=10;
                 return (a==10?true:false) && a!=10?false:true;
            }
        },{
            description: 'for loop test',
            test: function(){
                var a=0;
                for (var i=0;i<100;++i){
                    ++a;
                }
                return a==100;
            }
        },{
            description: 'for loop test with continue',
            test: function(){
                var a=0;
                for (var i=0;i<100;++i){
                    if (i%2==0) continue;
                    ++a;
                }
                return a==50;
            }
        },{
            description: 'for loop test with break',
            test: function(){
                var a=0;
                for (var i=0;i<20;++i){
                    if (i>=10) break;
                    ++a;
                }
                return a==10;
            }
        },{
            description: 'while loop test',
            test: function(){
                var a=var i=0;
                while (i<100){
                    ++a;
                    ++i;
                }
                return a==100;
            }
        },{
            description: 'while loop test with continue',
            test: function(){
        		var a=var i=0;
                while (i<100){
                	++i;
                    if (i%2==0) continue;
                    ++a;
                }
                return a==50;
            }
        },{
            description: 'while loop test with break',
            test: function(){
                var a=var i=0;
                while (i<100){
                	++i;
                    ++a;
                    if (i>=10) break;
                }
                return a==10;
            }
        },{
            description: 'try finally with return in try block',
            test: function(){
        		var a=0;
                var f=function(){
                	try{
                		return 1;
                	}finally{
                		a=2;
                	}
                };
                return f()==1 && a==2;
            }
        },{
            description: 'try finally with return in finally block',
            test: function(){
        		var a=0;
                var f=function(){
                	try{
                		a=2;
                		return a;
                	}finally{
                		return 3;
                	}
                };
                return f()==3 && a==2;            }
        },{
            description: 'try catch with user exception',
            test: function(){
        		try{
        			throw 'test';
        			return false;
        		}catch(e){
        			return e=='test';
        		}
        	}
        },{
        	description: 'try catch with system exception',
        	test: function(){
        		try{
        			var a=[1,2];
        			var b=a[10];
        			return false;
        		}catch(e){
        			return e.startsWith('Array index out of bounds');
        		}
        	}
        },{
        	description: 'try finally catch, all steps reached',
        	test: function(){
        		var a=var b=var c=var d=0;
        		try{
        			a=1;
        			try{
        				b=1;
        				var x=a[10];
        			}finally{
        				c=1;
        			}
        		}catch(e){
        			d=1;
        		}
        		return a==1 && b==1 && c==1 && d==1;
        	}
        },{
        	description: 'try finally catch, catch after finally',
        	test: function(){
        		var a=0;
        		try{
        			try{
        				var x=a[10];
        			}finally{
        				a=10;
        			}
        		}catch(e){
        			a=1;
        		}
        		return a==1;
        	}
        },{
        	description: 'compare array for equality',
        	test: function(){
        		var a=[1,2,3,'4','5'];
        		var b=[1,2,3,'4','5'];
        		return a==b;
        	}
        },{
        	description: 'prototype construction/usage',
        	test: function(){
        		var Foo={prototype:{getBar: function(){return 'bar';}}};
        		var x={prototype:Foo};
        		return x.getBar()=='bar';
            }
        },{
        	description: 'function chaining',
        	test: function(){
    			var a='1.343.34.2'; 
    			return a.replaceAll('.','').replaceAll('34','x')=='1x3x2';
        	}
        },{
        	description: 'static scoping',
        	test: function(){
        		let x = 0;
        		let f=function() { return x; };
        		let g=function () { let x = 1; return f(); };
        		return g()==0;
        	}
        },{
        	description: 'compare integers',
        	test: function(){
        		return 10==10 && 10!=6 && 10>6 && 10<12 && 10>=6 && 10<=12 &&
        			10>=10 && 10<=10; 
        	}
        },{
        	description: 'compare floats',
        	test: function(){
        		return 10.==10. && 10.!=6. && 10.>6. && 10.<12. && 10.>=6. && 10.<=12. &&
        			10.>=10. && 10.<=10.; 
        	}
        },{
        	description: 'compare strings',
        	test: function(){
        		return 'a'=='a' && 'a'!='b' && 'a'<'b' && 'a'<='b' && 'a'<='a'
        			&& 'b'>'a' && 'bb'>='ba' && 'bb'>='bb';
        	}
        },{
        	description: 'compare booleans',
        	test: function(){
        		return true==true && false==false && true!=false;
        	}
        },{
        	description: 'compare Void',
        	test: function(){
        		let a=Void;
        		let b=Void;
        		let c=NaN;
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare NaN',
        	test: function(){
        		let a=NaN;
        		let b=NaN;
        		let c=Void;
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare functions',
        	test: function(){
        		let a=function(a,b){return a+b;};
        		let b=[1,a];
        		let c=function(a,b){return a-b;};
        		return a==b[1] && b[1]!=c && a!=c && !(a!=b[1]);
        	}
        },{
        	description: 'compare library functions',
        	test: function(){
        		let a=String.prototype.length;
        		let b=[1,a];
        		let c=String.prototype.substr;
        		return a==b[1] && b[1]!=c && a!=c && !(a!=b[1]);
        	}
        },{
        	description: 'compare maps',
        	test: function(){
        		let a={a:1,b:'2',c:3};
        		let b={a:1,b:'2',c:3};
        		let c={a:1,b:'2',c:4};
        		let d={a:1,b:'2',x:3};
        		return a==b && b!=c && a!=c && !(a!=b) && !(a==d);
        	}
        },{
        	description: 'compare arrays',
        	test: function(){
        		let a=[1,'a',[1,2,['a','b',{a:true,b:34.5}]]];
        		let b=[1,'a',[1,2,['a','b',{a:true,b:34.5}]]];
        		let c=[1,'a',[1,2,['a','b',{a:true,b:34.6}]]];
        		return a==b && b!=c && a!=c && !(a!=b);
        	}
        },{
        	description: 'compare integer and float',
        	test: function(){
        		return 10==10. && 10!=6. && 10>6. && 10<12. && 10>=6. && 10<=12. &&	10>=10. && 10<=10.
        	        && 10.==10 && 10.!=6 && 10.>6 && 10.<12 && 10.>=6 && 10.<=12 && 10.>=10 && 10.<=10;
        	}
        },{
        	description: 'compare integer and string',
        	test: function(){
        		return '10'==10 && '10'!=6 && '20'>10 && '10'<12 && '20'>=11 && '10'<=12 && '10'>=10 && '10'<=10        	
        		&& 10=='10' && 10!='6' && 20>'16' && 10<'12' && 20>='16' && 10<='12' && 10>='10' && 10<='10';
        	}
        },{
        	description: 'compare float and string',
        	test: function(){
        		return '10.'==10. && '10.'!=6. && '20.'>10. && '10.'<12. && '20.'>=11. && '10.'<=12. && '10.'>=10. && '10.'<=10.        	
        		&& 10.=='10.' && 10.!='6.' && 20.>'16.' && 10.<'12.' && 20.>='16.' && 10.<='12.' && 10.>='10.' && 10.<='10.';
        	}
        },{
        	description: 'mismatched type compare',
        	test: function(){
        		return !(true==1) && !(true==1.) && true!=1. && !(true=='1') && true!='1'
        			&& 1!=true && 1.!=true && '1'!=true && Void!=NaN && NaN!=Void
        			&& String.prototype.length!=true && function(){return 1;}!=true
        			&& {a:1}!=true && [1,2]!=true;
        	}
        },{
        	description: 'invalid comparaison of booleans throws exception',
        	test: function(){
        		try{
        			let a=true<false;
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of voids throws exception',
        	test: function(){
        		try{
        			let a=Void<Void;
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of NaNs throws exception',
        	test: function(){
        		try{
        			let a=NaN<NaN;
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of arrays throws exception',
        	test: function(){
        		try{
        			let a=[1,2,3]<[4,5,6];
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of maps throws exception',
        	test: function(){
        		try{
        			let a={a:1,b:'a'}<{a:10,b:'b'};
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of functions throws exception',
        	test: function(){
        		try{
        			let a=function(a,b){return a-b;}<function(c){return c;};
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of library functions throws exception',
        	test: function(){
        		try{
        			let a=String.prototype.length<String.prototype.substr;
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'invalid comparaison of mismtached types throws exception',
        	test: function(){
        		try{
        			let a=true<void;
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },
        	
    ]
};    

