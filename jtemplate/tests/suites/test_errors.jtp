var testSuite={
    description: 'Errors',
    tests: 
    [
        {
            description: 'Incompatible types',
            test: function(){
            	try{
            		let a=true+"a".length();
            		return false;
                }catch (e){
                	return e == 'EXP-00 incompatible types boolean and integer';
                }
            }
        },{
            description: 'Invalid cast',
            test: function(){
            	try{
            		for (var i=0;i=i+1;i++);
            		return false;
                }catch (e){
                	return e == 'EXP-01 cannot cast a 1 to a boolean';
                }
            }
        },{
            description: 'Invalid operation',
            test: function(){
            	try{
            		let a=true+('a'.length()==1);
            		return false;
                }catch (e){
                	return e == 'EXP-02 invalid operation + for booleans';
                }
            }
        },{
            description: 'Invalid comparaison',
            test: function(){
            	try{
            		let a=true>('a'.length()==1);
            		return false;
                }catch (e){
                	return e == 'EXP-03 invalid comparaison > for boolean and boolean';
                }
            }
        },{
            description: 'Left side is not a map',
            test: function(){
            	try{
            		let a=10;
            		println(a.test);
            		return false;
                }catch (e){
                	return e == 'EXP-04 left side of member expression is not a map or array, but a integer with value 10';
                }
            }
        },{
            description: 'Left side cannot be assigned',
            test: function(){
            	try{
            		2=3;
            		return false;
                }catch (e){
                	return e == 'EXP-05 left side of assignment expression cannot be assigned';
                }
            }
        },{
            description: 'Invalid member',
            test: function(){
            	try{
            		let a={};
            		a[true]=1;
            		return false;
                }catch (e){
                	return e == 'EXP-06 member expression did not evaluate to a string or integer, but to a boolean with value true';
                }
            }
        },{
            description: 'Invalid member',
            test: function(){
            	try{
            		let a={};
            		a[true]=1;
            		return false;
                }catch (e){
                	return e == 'EXP-06 member expression did not evaluate to a string or integer, but to a boolean with value true';
                }
            }
        },{
            description: 'Undefined member',
            test: function(){
            	try{
            		let a={};
            		let c=a.b;
            		return false;
                }catch (e){
                	return e == 'EXP-07 member expression b is undefined';
                }
            }
        },{
            description: 'invalid index',
            test: function(){
            	try{
            		let a=[1,2,3];
            		let c=a['a'];
            		return false;
                }catch (e){
                	return e == 'EXP-08 invalid array index of type string with value a';
                }
            }
        },{
            description: 'invalid index',
            test: function(){
            	try{
            		let a=[1,2,3];
            		let c=a[10];
            		return false;
                }catch (e){
                	return e == 'EXP-09 array index out of bounds: 10';
                }
            }
        },{
            description: 'type mismatch in assignment',
            test: function(){
            	try{
            		let a=[1,2,3];
            		a=10;
            		return false;
                }catch (e){
                	return e == 'EXP-10 type mismatch in assignment of a declared as array, attempting to assign integer';
                }
            }
        },{
            description: 'too few arguments in function call',
            test: function(){
            	try{
            		let a=function(x,y){};
            		a(1);
            		return false;
                }catch (e){
                	return e == 'EXP-11 wrong number of arguments in function call, expected 2, got 1';
                }
            }
        },{
            description: 'too many arguments in function call',
            test: function(){
            	try{
            		let a=function(x,y){};
            		a(1,2,3);
            		return false;
                }catch (e){
                	return e == 'EXP-11 wrong number of arguments in function call, expected 2, got 3';
                }
            }
        },{
            description: 'calling a non-function',
            test: function(){
            	try{
            		let a=10;
            		a(1,2,3);
            		return false;
                }catch (e){
                	return e == 'EXP-12 invalid function call on a non-function variable';
                }
            }
        },{
            description: 'not a collection in foreach',
            test: function(){
            	try{
            		let a=10;
            		foreach(i in a);
            		return false;
                }catch (e){
                	return e == 'EXP-13 expected a collection type for the second argument of forEach, but got a integer';
                }
            }
        },{
            description: 'default case should be last',
            test: function(){
            	try{
            		let a=10;
            		switch(a){
            		default: break;
            		case 10: break;
            		}
            		return false;
                }catch (e){
                	return e == 'STM-00 the default case in a switch statement should be the last case';
                }
            }
        }
	]
};
