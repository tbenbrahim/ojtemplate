var testSuite={
	description: 'System Library',
	tests: [
		{
        	description: 'System.command',
        	test: function(){
				var filename='testdir.txt';
				File.delete(filename);
        		var result=
        			!File.exists(filename) &&
        			System.command('ls>'+filename)==0 &&
        			File.exists(filename);
        		File.delete('testdir.txt');
        		return result;
         	}
        },{
        	description: 'array push',
        	test: function(){
        		let a=[1,2,'3'];
        		a.push('4');
        		a.push(5);
        		return a==[1,2,'3','4',5];
        	}
        },{
        	description: 'array push on non array throws exception',
        	test: function(){
        		try{
        			let a=12;
        			Array.prototype.push.apply(a,'4');
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'array pop',
        	test: function(){
        		let arr=[1,2,'3','4',5];
        		let a=arr.pop();
        		let b=arr.pop();
        		return arr==[1,2,'3'] && a==5 && b=='4';
        	}
        },{
        	description: 'array pop on empty array throws exception',
        	test: function(){
        		try{
        			let arr=[];
        			let a=arr.pop();
        			let b=arr.pop();
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'array pop on non array throws exception',
        	test: function(){
	    		try{
	    			let arr=12;
	    			Array.prototype.pop.apply(arr);
	    			return false;
	    		}catch(e){
	    			return true;
	    		}
        	}
        },{
        	description: 'array length',
        	test: function(){
        		let arr1=[1,2,'3','4',5];
        		let arr2=[];
        		return arr1.length()==5 &&
        		       arr2.length()==0 &&
        		       [1,2,'3','4',5].length()==5;
        	}
        },{
        	description: 'array length on non array throws exception',
        	test: function(){
        		try{
	        		let arr1=12;
	    			Array.prototype.length.apply(arr1);
	        		return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'integer parse',
        	test: function(){
        		return '15'.parseInt()==15 &&
        			   '15.4'.parseInt()==Void &&
        		       '1.5a'.parseInt()==Void;
        	}
        },{
        	description: 'float parse',
        	test: function(){
        		return '1.5'.parseFloat()==1.5 &&
        		       '1.5a'.parseFloat()==Void;
        	}
        },{
        	description: 'float round',
        	test: function(){
        		return 12.34.round()==12 &&
        		       12.64.round()==13;
        	}
        },{
        	description: 'float round on non float throws exception',
        	test: function(){
        		try{
        			Float.prototype.round.apply(1);
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'map keys',
        	test: function(){
        		let m={a:1,b:'123',d:true};
        		let a=m.keys();
        		return a==['a','b','d'] || a==['a','d','b'] ||
        			   a==['b','a','d'] || a==['b','d','a'] ||
        		       a==['d','a','b'] || a==['d','b','a'];
        	}
        },{
        	description: 'map keys on non map throws exception',
        	test: function(){
        		try{
        			let m=[12,123,'a'];
        			Map.prototype.keys.apply(m);
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'map contains',
        	test: function(){
        		let m={a:1,b:'123',d:true};
        		let a=m.keys();
        		return m.contains('a') && !m.contains('c');
        	}
        },{
        	description: 'map contains on non map throws exception',
        	test: function(){
        		try{
        			let m=[12,123,'a'];
        			Map.prototype.contains.apply(m,'a');
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'map remove',
        	test: function(){
        		let m={a:1,b:'123',d:true};
        		m.remove('a');
        		return m=={b:'123',d:true};
        	}
        },{
        	description: 'map remove on non map throws exception',
        	test: function(){
        		try{
        			let m=[12,123,'a'];
        			Map.prototype.remove.apply(m);
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'Date.now()',
        	test: function(){
        		let d=Date.now();
        		foreach(f in ['second','minute','hour','dayOfMonth','month','year','dayOfWeek',
        		              'dayOfYear','gmtOffset'])
        		    if (!d.contains(f) || typeof(d[f])!='integer')
        		    	return false;
        		return d.contains('dst') && typeof(d.dst)=='boolean';
        	}
        },{
        	description: 'random()',
        	test: function(){
        		let i=0;
        		let sum=0;
        		while(i<1000){
        			let r=Integer.random(101);
        			if (r!=50){
        				sum+=r;
        				++i;
        			}
        		}
        		let avg=sum/i;
        		return avg>=46 && avg<=54;
        	}
        },{
        	description: 'typeof()',
        	test: function(){
        		return typeof(1)=='integer' && typeof(1.2)=='float' && typeof('a')=='string' &&
        		  typeof(true)=='boolean' && typeof(Void)=='void' && typeof(function(){})=='function' &&
        		  typeof([])=='array' && typeof({})=='map' && typeof(NaN)=='NaN' &&
        		  typeof(String.prototype.length)=='function';
        	}
        },{
        	description: 'apply()',
        	test: function(){
        		let foo=function(){return this*2;};
        		return String.prototype.length.apply('233')==3 &&
        			foo.apply(2)==4 && function(){return this*2;}.apply(3)==6;
        	}
        },{
        	description: 'apply() on non function throws exception',
        	test: function(){
        		try{
        			let a=1.2;
        			Function.prototype.apply(a,12);
        			return false;
        		}catch(e){
        			return true;
        		}
        	}
        },{
        	description: 'debug dump symbol table',
        	test: function(){
        		Debug.dumpSymbolTable();
        		return true;
        	}
        },{
        	description: 'debug dump stack trace',
        	test: function(){
        		Debug.dumpStackTrace();
        		return true;
        	}
        }
	]
};