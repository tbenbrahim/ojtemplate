/*
 example 1
*/

let Array.prototype.reduce=function(f, init){
    let result=init;
    for (let i=0; i<this.length(); i=i+1)
        result = f(this[i],result);
    return result;
};

let data=[1,2,4,8,16];

let sum=function(a,b){ return a+b; };
let product=function(a,b){ return a*b; };

println('The sum of [1,2,4,8,16] is '+ data.reduce(sum,0));
println('The product of [1,2,4,8,16] is '+ data.reduce(product,1));
println('');

let Array.prototype.map=function(f){
    let result=[];
    for (let i=this.length()-1;i>=0;i=i-1)
        result.push(f(this[i]));
    return result;
};

[1,2,3,4].map(function(x){return 2*x;}).map(function(x){print(x,' ');});

/*
  example 2, map functions and data
*/

let Array.prototype.reduce2=function(m){
    let result=m.init;
    for (let i=0; i<this.length(); i=i+1)
        result = m.f(result,this[i]);
    return result;
};


let sum={f: function(a,b){ return a+b; } , init: 0 };
let product={f: function(a,b){ return a*b; } , init: 1 };
let concat={f: function(a,b){ return a+b+','; } , init: '' };

println('The sum of [1,2,4,8,16] is '+ data.reduce2(sum));
println('The product of [1,2,4,8,16] is '+ data.reduce2(product));
println('The concatenation of [1,2,4,8,16] is '+ data.reduce2(concat));
println('');

/*
 example 3, anon functions
*/

println('The sum of [1,2,4,8,16] is '+ data.reduce(function(a,b){ return a+b; },0));
println('The product of [1,2,4,8,16] is '+ data.reduce(function(a,b){ return a*b; },1));
println('');


function(f, elements...){
    foreach(element in elements)
        f(element);
}(function(x){print(x,' ');},'','Hello','world',1,2,3);

/*
example 4, partial application
*/

let add=function(a,b){return a+b;};
let inc=add(1,@x);
let one=1;

println();
let inc2=add(one,@x);
println(inc(10),', ',inc2(4));

// now for varags and partial application

//with a library function
let println2=println('from println2>>> ',@value...);
println2('This is a test ',1,2,3);

//with a 'native' function
let print_sep=function(separator,elements...){
    foreach(element in elements)
        print(element,separator);
};

let print_space=print_sep(' ',@items...);
let print_comma=print_sep(', ',@items...);

print_space(1,2,3,4,5);
print_comma(1,2,3,4,5);
println();
